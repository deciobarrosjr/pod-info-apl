name: 'Destroy registries on specified cloud provider'
description: 'A custom GitHub Action used to destroy registries on the specified cloud provider.'
inputs:
  cloud_name:
    description: 'The name of the cloud provider (AWS, GCP, or Azure).'
    required: true
    default: 'AWS'
  registries_list:
    description: 'The list of registry names to be destroyed on AWS, GCP, or Azure.'
    required: true
    default: 'my-registry'
  region:
    description: 'The AWS, GCP or Azure region/location where the registry will be created.'
    required: true
  project_id:
    description: 'The GCP project ID where the registry will be created (required only for GCP).'
  aws_access_key_id:
    description: 'The AWS access key ID.'
    required: false
  aws_secret_access_key:
    description: 'The AWS secret access key (required only for AWS).'
    required: false
  google_credentials:
    description: 'The Google Cloud credentials (required only for GCP).'
    required: false
  azure_credentials:
    description: 'The Azure credentials (required only for Azure).'
    required: false
  resource_group:
    description: 'The Azure resource group (required only for Azure).'
    required: false
  description:
    description: 'The description of the registry (used only by AWS and Azure).'
    required: false
  verbose:
    description: 'Verbode mode for debugging purposes.'
    required: false
    default: false

runs:
  using: 'composite'
  steps:


  ############################################################################################################
  #                                            CLOUD AUTHENTICATION                                         #
  ############################################################################################################ 

    # AWS - CONFIGURE THE CREDENTIALS

    - name: Configure AWS Credentials     
      uses: aws-actions/configure-aws-credentials@v4
      if: ${{ inputs.cloud_name == 'AWS' }}
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.region }}

    # GCP - CONFIGURE THE CREDENTIALS

    - name: Configure GCP Credentials   
      if: ${{ inputs.cloud_name == 'GCP' }}         
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.google_credentials }}

    # Azure - CONFIGURE THE CREDENTIALS

    - name: Azure CLI Login
      uses: azure/login@v2
      if: ${{ inputs.cloud_name == 'Azure' }}
      with:
        creds: ${{ inputs.azure_credentials }}
        enable-azpssession: true



    ############################################################################################################
    #                                            REGISTRY DESTRUCTION                                          #
    ############################################################################################################         

    # AWS - DESTROY THE ARTIFACT REGISTRIES

    - name: Destroy ECR registries
      if: ${{ inputs.cloud_name == 'AWS' }}
      shell: bash
      run: |

        #####     LOOP ON THE REGISTRIES LIST     #####

        echo "${{ inputs.registries_list }}" | tr ' ' '\n' | while read -r registry_name; do

          if [ -z "${registry_name}" ]; then 
            continue   
          fi

          registry_exists=$(aws ecr describe-repositories --region ${{ inputs.region }} --output text --query "repositories[?repositoryName=='$registry_name']" 2>/dev/null)    

          if [ -n "${registry_exists}" ]; then 
            
              echo "Repository $registry_name exists. Proceeding with deletion..."

              if [ "${{ inputs.verbose }}" == "true" ]; then
                aws ecr delete-repository \
                  --repository-name $registry_name \
                  --region ${{ inputs.region }} \
                  --force
              else
                aws ecr delete-repository \
                  --repository-name $registry_name \
                  --region ${{ inputs.region }} \
                  --force \
                  --no-cli-pager 2>/dev/null            
              fi

              echo "Repository $registry_name deleted."              
            else
              echo "Repository $registry_name does not exist."              
            fi

        done


   # GCP - DESTROY THE ARTIFACT REGISTRIES

    - name: Destroy GAR registries
      if: ${{ inputs.cloud_name == 'GCP' }}
      shell: bash
      run: |

        #####     LOOP ON THE REGISTRIES LIST     #####

        echo "${{ inputs.registries_list }}" | tr ' ' '\n' | while read -r registry_name; do

          if [ -z "${registry_name}" ]; then 
            continue   
          fi
        
          registry_exists=$(gcloud artifacts repositories list --filter="name:$registry_name" --format="value(name)" 2>/dev/null)

          if [ -n "${registry_exists}" ]; then 
            echo "Repository $registry_name exists. Proceeding with deletion..."

            if [ "${{ inputs.verbose }}" == "true" ]; then
              gcloud artifacts repositories delete $registry_name \
                --location=${{ inputs.region }}           
            else
              gcloud artifacts repositories delete $registry_name \
                --location=${{ inputs.region }} \
                --quiet 2>/dev/null
            fi

              echo "Repository $registry_name deleted."
            else
              echo "Repository $registry_name does not exist."
            fi    

        done    


   # Azure - DESTROY THE ARTIFACT REGISTRIES

    - name: Destroy ACR registries
      if: ${{ inputs.cloud_name == 'Azure' }}
      shell: bash
      run: |

        #####     LOOP ON THE REGISTRIES LIST     #####

        echo "${{ inputs.registries_list }}" | tr ' ' '\n' | while read -r registry_name; do

          if [ -z "${registry_name}" ]; then 
            continue   
          fi

          azure_registry_name=$(echo "$registry_name" | sed 's/\.azurecr\.io//') 

          registry_exists=$(az acr list --resource-group "${{ inputs.resource_group }}" --query "[?name=='$azure_registry_name'].name" --output tsv)

          if [ -n "$registry_exists" ]; then
            echo "ACR '$azure_registry_name' exists. Proceeding with deletion..."

            if [ "${{ inputs.verbose }}" == "true" ]; then
              az acr delete --name "$azure_registry_name" --resource-group "${{ inputs.resource_group }}" --yes  
            else
              az acr delete --name "$azure_registry_name" --resource-group "${{ inputs.resource_group }}" --yes --only-show-errors --output none             
            fi

          else
            echo "ACR '$azure_registry_name' does not exist."
          fi

        done      