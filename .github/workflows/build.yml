name: "CI Build"
permissions:
  contents: read
  packages: write
on:
  push:
    branches:
      - main

env:
  # GENERAL ENVIRONMENT VARIABLES

  APL_DOCKER_IMAGE_NAME: 'ghcr.io/${{ github.actor }}/pod-info-apl'
  APL_NAME: 'pod-info-apl'
  VERBOSE: ${{ vars.verbose }}

  # GENERAL HELM CHART VARIABLES

  HELM_FOLDER: './helm-chart'
  VALUES_YML_FULL_PATH: './helm-chart/values.yaml'
  VALUES_YML_FULL_PATH_ENVSUBST: './helm-chart/values-envsubst.yaml'
  CHART_YML_FULL_PATH: './helm-chart/Chart.yaml'
  CHART_YML_FULL_PATH_ENVSUBST: './helm-chart/Chart-envsubst.yaml'

  # HELM CHART CUSTOMIZATION VARIABLES

  SVCTYPE_APL: 'ClusterIP'
  CONTAINER_PORT_APL: '3030'
  PORT_APL: '80'
  NODE_POOL_NAME: 'default-pool'

 

jobs:
  ############################################################################################################
  #                                         BUILD & PUSH DOCKER IMAGE                                        #
  ############################################################################################################
      
  Build-Push-Image:
    runs-on: ubuntu-latest  
    name: Build and pushes image.
    outputs:
      aplversion: ${{ steps.apl-get-app-version.outputs.version }}

    steps:

      # ACTIONS - CHECKOUT THE LOCAL GITHUB ACTIONS

      - name: Download actions
        uses: actions/checkout@v4
        with:
          show-progress: ${{ env.VERBOSE }}
          path: ./. 
          fetch-depth: 1
          sparse-checkout: |
            .github 

      # CHECKOUT THE REPOSITORY

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          show-progress: ${{ env.VERBOSE }} 


      # VERBOSE - LISTS THE CHECKOUT FOLDERS IF THE VERBOSE ENVIRONMENT VARIABLE IS SET TO TRUE

      - name: Verbose - Lists Checkout folders
        if: ${{ env.VERBOSE == 'true' }}
        run: |
          echo ">>>>> Folder: ./."
          ls -al ./.
          [ -d "./application" ] && echo ">>>>> Folder: application" && ls -l application
          [ -d "./.github/actions" ] && echo ">>>>> Folder: ./.github/actions" && ls -al ./.github/actions

      # GET THE CURRENT VERSION OF THE POD-INFO-APL APPLICATION

      - name: pod-info-apl - Get the Current App version
        uses: ./.github/actions/get-app-version
        id: apl-get-app-version
        with:
          app_folder: "./application"
          verbose: ${{ env.VERBOSE }}

      # VERBOSE - LISTS THE CURRENT VERSION OF THE POD-INFO-APL APPLICATION

      - name: Verbose - print the Current App version
        if: ${{ env.VERBOSE == 'true' }}      
        run: |
          echo ">>>>> Version from the step : ${{ steps.apl-get-app-version.outputs.version }}"
          echo ">>>>> Version from the env  : ${{ env.aplversion }}"

      # CREATING THE DOCKER FOLDER TO COPY THE BINARIES AND DOCKERFILE TO IT

      - name: Creating a Docker Folder 
        env:
          DOCKER_FOLDER: "Docker_Files_Apl"
          SOURCE_FOLDER: "application"
        run: |
          mkdir -p ./$SOURCE_FOLDER/$DOCKER_FOLDER
          cp ./$SOURCE_FOLDER/requirements.txt ./$SOURCE_FOLDER/$DOCKER_FOLDER/
          cp ./$SOURCE_FOLDER/Dockerfile ./$SOURCE_FOLDER/$DOCKER_FOLDER/
          cp ./$SOURCE_FOLDER/app.py ./$SOURCE_FOLDER/$DOCKER_FOLDER/

          if [ "${{ env.VERBOSE }}" == "true" ]; then
            [ -d "./$SOURCE_FOLDER/$DOCKER_FOLDER" ] && ls -al ./$SOURCE_FOLDER/$DOCKER_FOLDER
          fi

      # AUTHENTICATING WITH THE GITHUB CONTAINER REGISTRY

      - name: Authenticate with GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io/${{ github.actor }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # CREATING THE DOCKER IMAGE AND PUSHING IT TO THE REGISTRY

      - name: Build and push Docker image to GitHub Container Registry (Personal Account)
        uses: docker/build-push-action@v6
        with:
          context: ./application
          push: true
          tags: ${{ env.APL_DOCKER_IMAGE_NAME }}:${{ steps.apl-get-app-version.outputs.version }}


      # VERBOSE - LISTS THE THE DOCKER LOCAL IMAGES CREATED  

      - name: Verbose - Lists the Docker images created
        if: ${{ env.VERBOSE == 'true' }}
        run: |
          docker images



  ############################################################################################################
  #                                          HELM CHART BUILD AND PUSH                                       #
  ############################################################################################################           

  Helm-Chart-Build-Push-Pckg:
    runs-on: ubuntu-latest  
    name: Helm Build and push.
    needs: Build-Push-Image
    steps:

      # INSTALL ENVSUBST (USED TO PROCESS THE values.yml CUSTOMIZATION)

      - name: Ensure gettext is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext

      # helm-chart - CHECKOUT THE HELM CHART TEMPLATE

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          show-progress: ${{ env.VERBOSE }}       
          path: ./. 
          fetch-depth: 1
          sparse-checkout: |
            helm-chart/          

      # VERBOSE - LISTS THE THE HELM CHART TEMPLATE FOLDER 

      - name: VERBOSE - Lists the Helm chart template folder
        if: ${{ env.VERBOSE == 'true' }}
        run: |
          ls -al ./. 
          ls -Rl ./helm-chart
          cat ./helm-chart/values-envsubst.yaml          

      # CUSTOMIZING THE HELM CHART TEMPLATE

      - name: Customizing the Helm chart template
        run: |
          cp ${{ env.VALUES_YML_FULL_PATH_ENVSUBST }} ${{ env.VALUES_YML_FULL_PATH }}.orig
          envsubst < ${{ env.VALUES_YML_FULL_PATH }}.orig > ${{ env.VALUES_YML_FULL_PATH }}
          cp ${{ env.CHART_YML_FULL_PATH_ENVSUBST }} ${{ env.CHART_YML_FULL_PATH }}.orig
          envsubst < ${{ env.CHART_YML_FULL_PATH }}.orig > ${{ env.CHART_YML_FULL_PATH }}
        env:
          APP_IMAGE: ${{ env.APL_DOCKER_IMAGE_NAME }}
          APL_NAME: ${{ env.APL_NAME }}
          APL_VERSION: ${{ needs.Build-Push-Image.outputs.aplversion }}
          CONTAINER_PORT: ${{ env.CONTAINER_PORT_APL }}
          PORT: ${{ env.PORT_APL }}
          SVC_TYPE: ${{ env.SVCTYPE_APL }}
          ALB_SCHEME: "internet-facing"
          NODE_POOL_NAME: ${{ env.NODE_POOL_NAME }}

      # VERBOSE - LISTS THE THE HELM CHART FILES

      - name: VERBOSE - Lists the Helm chart values.yml,chart.yml and deployment.ym contents
        if: ${{ env.VERBOSE == 'true' }}
        run: |
          echo ">>>>> Current working directory:"  
          pwd    
          echo " "; echo ">>>>> File: ${{ env.VALUES_YML_FULL_PATH }}"; echo " "
          cat ${{ env.VALUES_YML_FULL_PATH }}
          echo " "; echo ">>>>> File: ${{ env.CHART_YML_FULL_PATH }}"; echo " "
          cat ${{ env.CHART_YML_FULL_PATH }}
          echo " "; echo ">>>>> File: ./helm-chart/templates/deployment.yaml"; echo " "
          cat ./helm-chart/templates/deployment.yaml
          echo " "; echo ">>>>> File: ./helm-chart/templates/service.yaml"; echo " "
          cat ./helm-chart/templates/service.yaml     
          echo " "; echo ">>>>> File: ./helm-chart/templates/ingress.yaml"; echo " "
          cat ./helm-chart/templates/ingress.yaml                  

      # LINTING THE HELM CHART

      - name: Executes the chart lint
        run: |
          helm lint "${{ env.HELM_FOLDER }}"  

      # AUTHENTICATING HELM WITH GITHUB CONTAINER REGISTRY

      - name: Authenticate Helm with GitHub Container Registry
        run: |
          helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      # PACKAGING AND PUSHING THE HELM CHART

      - name: Package and push Helm Chart to OCI Registry
        run: |
          [ "${{ env.VERBOSE }}" == "true" ] && echo ">>>>> Apl Version: ${{ env.APL_VERSION }}"

          helm package "${{ env.HELM_FOLDER }}" --destination "${{ github.workspace }}"
          helm push "${{ github.workspace }}/${{ env.APL_NAME }}-$APL_VERSION.tgz" oci://ghcr.io/${{ github.actor }}/helm-charts
        env:
          APL_VERSION: ${{ needs.Build-Push-Image.outputs.aplversion }}

      # CONFIGURING GIT FOR THE CHART RELEASER

      #      - name: Configure Git
      #        run: |
      #          git config user.name "${{ github.actor }}"
      #          git config user.email "${{ github.actor }}@users.noreply.github.com"

#      - name: Run Helm Chart Releaser
#        uses: helm/chart-releaser-action@v2
#        env:
#          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # PUSH THE HELM CHART TO THE GITTHUB REGISTRY

      #      - name: Push the Helm Chart to GitHub Registry
      #        uses: helm/chart-releaser-action@v2
      #        id: chart_upload
      #        with:
      #          chart-repo: https://github.com/${{ github.repository_owner }}/${{ github.repository }}/helm-charts
      #          chart-name: ${{ env.APL_NAME }}
      #          chart-version: ${{ env._APLVERSION }}
      #          package-path: ./helm-chart
      #          token: ${{ secrets.GITHUB_TOKEN }}
          #GITHUB_REPOSITORY: ${{ github.repository }}
          #           GITHUB_ACTOR: ${{ github.actor }}
          #           GITHUB_REF: ${{ github.ref }}
          #           GITHUB_SHA: ${{ github.sha }}
          #           GITHUB_WORKFLOW: ${{ github.workflow }}
          #           GITHUB_RUN_ID: ${{ github.run_id }}
          #           GITHUB_RUN_NUMBER: ${{ github.run_number }}
          #           GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
          #           GITHUB_RUN_URL: ${{ github.run_url }}
          #           GITHUB_SERVER_URL: ${{ github.server_url }}
          #           GITHUB_API_URL: ${{ github.api_url }}
          #           GITHUB_GRAPHQL_URL: ${{ github.graphql_url }}
          #           GITHUB_ENV: ${{ github.env }}
          #           GITHUB_PATH: ${{ github.path }}
          #           GITHUB_OUTPUT: ${{ github.output }}
          #           GITHUB_WORKSPACE: ${{ github.workspace }}
          #           GITHUB_EVENT_NAME: ${{ github.event_name }}   

#      - name: Show Download Info
#        run: |
#          echo "Download the Helm Chart using:"
#          echo "helm repo add my-repo https://github.com/${{ github.actor }}/helm-charts"
#          echo "helm repo update"
#          echo "helm pull my-repo/${{ env.APL_NAME }} --version ${{ env._APLVERSION }}"
  